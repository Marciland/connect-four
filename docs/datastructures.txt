After introducing AbstractCells i had col and row index inside each cell.
Thus i did not need a position for each cell anymore.
I made use of perf_counter to measure how long the calculation of a move took using my dictionary solution first.
I used to store cells in a dictionary with 'pos': cell where pos was colxrow as string.
Then i switched to a list of cells as the position was not needed anymore.

For a small comparison on how performant datastructures are in python:
medium difficulty dict:
Computer move calculated in: 0.0021915000397711992
Computer move calculated in: 0.0017851998563855886
Computer move calculated in: 0.002180300187319517
Computer move calculated in: 0.0032941000536084175

medium difficulty list:
Computer move calculated in: 0.003327700076624751
Computer move calculated in: 0.0005810000002384186
Computer move calculated in: 0.003319700015708804
Computer move calculated in: 0.0043264999985694885

hard difficulty dict:
Computer move calculated in: 0.003643200034275651
Computer move calculated in: 0.004363700048997998
Computer move calculated in: 0.0042818000074476
Computer move calculated in: 0.004212399944663048

hard difficulty list:
Computer move calculated in: 0.0057604999747127295
Computer move calculated in: 0.0067824001889675856
Computer move calculated in: 0.00672530010342598
Computer move calculated in: 0.006007400108501315

The code took slight changes due to how i find cells and as you can see the difference is quite big.
Sometimes the calculation took 50% more time due to how python is going through the list instead of finding the cell in a dictionary.

I tried sets to realize they are unordered and this would mean i would need to revisit a lot of code in order for this to function and stopped there.
